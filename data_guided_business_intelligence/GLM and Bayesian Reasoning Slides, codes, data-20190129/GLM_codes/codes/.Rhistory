install.packages("robust")
library(robust)
data(breslow.dat, package="robust")
summary(breslow.dat)
names(breslow.dat)
dim(breslow.dat)
t(breslow.dat[1,])
names(breslow.dat)
dim(breslow.dat)
t(breslow.dat[1,])
opar <- par(no.readonly = TRUE)
par (mfrow = c(1,2))
attach(breslow.dat)
hist(sumY, breaks=20, xlab="Seizure Count",
main="Distribution of Seizures")
boxplot(sumY ~ Trt, xlab="Treatment",
main = "Group Comparisons")
par(opar)
fit <- glm(sumY ~ Base + Age + Trt,
data = breslow.dat,
family=poisson(link="log"))
summary(fit)
summary(fit)
coef(fit)
exp(coef(fit))
options(digits=3)
coef(fit)
exp(coef(fit))
install.packages("qcc")
library(qcc)
qcc.overdispersion.test(breslow.dat$sumY,
type = "poisson")
fit.od <- glm(sumY ~ Base + Age + Trt,
data = breslow.dat,
family=quasipoisson())
summary(fit.od)
library(AER)
data(Affairs, package="AER")
summary(Affairs)
names(Affairs)
dim(Affairs)
t(Affairs[1,])
table(Affairs$affairs)
Affairs$ynaffair[Affairs$affairs > 0] <- 1
Affairs$ynaffair[Affairs$affairs == 0] <- 0
Affairs$ynaffair <- factor(Affairs$ynaffair,
levels = c(0,1),
labels = c("No","Yes"))
table(Affairs$ynaffair)
fit.full <- glm (ynaffair ~
gender +
age +
yearsmarried +
children +
religiousness +
education +
occupation +
rating,
data = Affairs,
family = binomial(link="logit")
)
summary(fit.full)
fit.reduced <- glm (ynaffair ~
age +
yearsmarried +
religiousness +
rating,
data = Affairs,
family = binomial(link="logit")
)
summary(fit.reduced)
setwd("F:/Samatova_EXT/0-LECTURES/0-NCSU-CISCO-DS/Fall-2015/GeneralizedLinearModel/codes")
source("scoringEvalFunctions.R")
d <- data.frame(y=(1:10)^2, x=1:10)
d
lmodel <- lm (y~x, data=d)
summary(lmodel)
d$prediction <- predict(lmodel, newdata=d)
names(d)
library('ggplot2')
ggplot(data=d) + geom_point(aes(x=x,y=y)) +
geom_line(aes(x=x,y=prediction), color='blue') +
geom_segment(aes(x=x, y=prediction, yend=y,xend=x), color='red') +
scale_y_continuous('')
lmodel$residuals
d <- data.frame(y=(1:10)^2, x=1:10)
lmodel <- lm (y~x, data=d)
d$prediction <- predict(lmodel, newdata=d)
RMSE <- rmse(d$y,d$prediction)
Rsquared <- rsq(d$y, d$prediction)
pCor <- cor(d$prediction, d$y, method="pearson")
sCor <- cor(d$prediction, d$y, method="spearman")
data.frame(RMSE=RMSE, Rsquared=RSquared,
Pearson=pCor, Spearman=sCor)
Rsquared <- rsq(d$y, d$prediction)
pCor <- cor(d$prediction, d$y, method="pearson")
# Spearman: rank order correlation
sCor <- cor(d$prediction, d$y, method="spearman")
data.frame(RMSE=RMSE, Rsquared=Rsquared,
Pearson=pCor, Spearman=sCor)
states <- as.data.frame(state.x77[,c("Murder","Population","Illiteracy", "Income", "Frost")])
dim(states)
states
t(states[1])
t(states[1,])
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
dim(summary(murderModel)$coefficients)[1]
dim(dtrain)[1]
dfm <- df(dtrain, murderModel)
rse(murderModel,dfm)
# How is RSE compared to RMSE values for the model?
summary(murderModel)
dtrain$prediction <- predict(murderModel,newdata=dtrain)
dtest$prediction <- predict(murderModel,newdata=dtest)
names(dtest)
ggplot(data=dtest, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtest, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtrain, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtest, aes(x=prediction,y=prediction-Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=prediction-Murder,color="black"))
ggplot(data=dtrain, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtest, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtrain, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtest, aes(x=prediction,y=Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=Murder,color="black")) +
geom_line(aes(x=Murder,y=Murder,color="blue"))
ggplot(data=dtest, aes(x=prediction,y=prediction-Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=prediction,y=prediction-Murder,color="black"))
ggplot(data=dtest, aes(x=Murder,y=prediction-Murder)) +
geom_point(alpha=0.5,color="black") +
geom_smooth(aes(x=Murder,y=prediction-Murder,color="black"))
rmse(dtrain$Murder,dtrain$prediction)
rmse(dtest$Murder,dtest$prediction)
rsq(dtrain$Murder,dtrain$prediction)
rsq(dtest$Murder,dtest$prediction)
summary(murderModel)
# Build the model including ONLY sugnificant predictors
murderModelReduced <- lm (Murder ~ Population + Illiteracy, data=dtrain)
summary(murderModelReduced)
dtrain$prediction <- predict(murderModelReduced,newdata=dtrain)
dtest$prediction <- predict(murderModelReduced,newdata=dtest)
rsq(dtrain$Murder,dtrain$prediction)
rsq(dtest$Murder,dtest$prediction)
y <- c(1,2,3,4,5,9,10)
ypred <- c(0.5, 0.5, 0.5, 0.5, 0.5, 9, 10)
cor(y,ypred)
library(car)
vifstats <- vif (murderModel)
sqrt(vifstats) > 2.0 # problem with a predictor var?
data(mtcars)
dim(mtcars)
names(mtcars)
fit <- lm(mpg ~ hp + wt, data=mtcars)
mpgpred <- predict(fit, newdata=mtcars)
rmse(mtcars$mpg, mpgpred)
rsq(mtcars$mpg, mpgpred)
vifstats <- vif (fit)
sqrt(vifstats) > 2.0
fit <- lm(mpg ~ hp + wt + hp:wt, data=mtcars)
mpgpred <- predict(fit, newdata=mtcars)
rmse(mtcars$mpg, mpgpred)
rsq(mtcars$mpg, mpgpred)
vifstats <- vif (fit)
sqrt(vifstats) > 2.0
fit <- lm(mpg ~ hp + wt, data=mtcars)
mpgpred <- predict(fit, newdata=mtcars)
rmse(mtcars$mpg, mpgpred)
rsq(mtcars$mpg, mpgpred)
vifstats <- vif (fit)
sqrt(vifstats) > 2.0
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
help(glm)
utils::data(anorexia, package = "MASS")
anorex.1 <- glm(Postwt ~ Prewt + Treat + offset(Prewt),
family = gaussian, data = anorexia)
summary(anorex.1)
data(Affairs, package="AER")
fit.full <- glm (ynaffair ~
gender +
age +
yearsmarried +
children +
religiousness +
education +
occupation +
rating,
data = Affairs,
family = binomial(link="logit")
)
summary(fit.full)
coef(fit.full)
exp(coef(fit.full))
data(Affairs, package="AER")
fit.full <- glm (ynaffair ~
gender +
age +
yearsmarried +
children +
religiousness +
education +
occupation +
rating,
data = Affairs,
family = binomial(link="logit")
)
summary(fit.full)
vec <- c(95, 85, 90)
mean(vec)
sd (vec)
pi
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((95 - mean(vec))^2) / (2 * sd(vec)^2)))
const
exp.value
vec <- c(125, 100, 70, 120, 60, 220, 75)
mean(vec)
sd (vec)
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp
atr <- 120
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp
probability <- const * exp.value
probability
vec <- c(95, 85, 90)
mean(vec)
sd (vec)
atr <- 95
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp.value
probability
vec <- c(125, 100, 70, 120, 60, 220, 75)
mean(vec)
sd (vec)
atr <- 95
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp.value
probability
vec <- c(95, 85, 90)
mean(vec)
sd (vec)
atr <- 95
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp.value
probability
class.prob <- 3.0 / 10
class.pred <- probability * class.prob
class.pred
vec <- c(125, 100, 70, 120, 60, 220, 75)
mean(vec)
sd (vec)
atr <- 95
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp.value
probability
class.prob <- 7.0 / 10
class.pred <- probability * class.prob
class.pred
vec <- c(95, 85, 90)
mean(vec)
sd (vec)
atr <- 95
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp.value
probability
class.prob <- 3.0 / 10
class.pred <- probability * class.prob
class.pred
vec <- c(125, 100, 70, 120, 60, 220, 75)
mean(vec)
sd (vec)
atr <- 95
const <- 1.0 / (sqrt (2*pi) * sd(vec))
exp.value <- exp((-((atr - mean(vec))^2) / (2 * sd(vec)^2)))
probability <- const * exp.value
probability
class.prob <- 7.0 / 10
class.pred <- probability * class.prob
class.pred
